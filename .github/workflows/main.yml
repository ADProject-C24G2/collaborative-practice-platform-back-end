name: Build, Scan, and Deploy to ACR

on:
  push:
    branches:
      - master

env:
  JAVA_VERSION: '11'
  JAVA_DISTRIBUTION: 'microsoft'
  ARTIFACT_PATH: 'platform-server/target/*.jar'
  IMAGE_NAME: 'java-service'
  DB_NAME: 'testdb'
  DB_USER: 'testuser'
  DB_PASSWORD: 'testpassword'
  DB_ROOT_PASSWORD: 'rootpassword'

jobs:
  build-and-sast-sca-scan:
    name: Build and SAST & SCA Scan
    runs-on: ubuntu-latest
    if: github.repository == 'ADProject-C24G2/collaborative-practice-platform-back-end'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'maven'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'java'

      - name: Set Cache Week
        id: date
        run: echo "week=$(date +%Y-%U)" >> $GITHUB_OUTPUT

      - name: Cache NVD data
        uses: actions/cache@v4
        with:
          path: ~/.dependency-check/data
          key: ${{ runner.os }}-nvd-data-${{ steps.date.outputs.week }}
          restore-keys: |
            ${{ runner.os }}-nvd-data-

      - name: Build and Run OWASP Dependency Check for SCA
        continue-on-error: true
        run: mvn -B clean install org.owasp:dependency-check-maven:check -DnvdApiKey=${{ secrets.NVD_API_KEY }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"

      - name: Upload SCA Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: all-sca-reports
          path: '**/target/dependency-check-report.html'

      - name: Upload CodeQL SAST Report
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sast-report
          path: /home/runner/work/collaborative-practice-platform-back-end/results/java.sarif

      - name: Upload JAR artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: java-app-jar
          path: ${{ env.ARTIFACT_PATH }}

  dast-scan-and-push:
    name: Integration, DAST Scan & Push to ACR
    runs-on: ubuntu-latest
    needs: build-and-sast-sca-scan
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get commit hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create workspace directory for artifact
        run: mkdir -p ${{ github.workspace }}/platform-server/target

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app-jar
          path: ${{ github.workspace }}/platform-server/target

      - name: Build local Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }} .

      - name: Download latest frontend release asset
        uses: robinraju/release-downloader@v1.12
        with:
          repository: "ADProject-C24G2/collaborative-platform-teacher-side-front-end"
          fileName: "frontend-build.zip"
          tag: "latest"
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create frontend directory and unzip asset
        run: |
          mkdir -p react-build
          unzip frontend-build.zip -d react-build
          echo "Frontend asset unzipped into ./react-build"

      - name: Create Nginx configuration for DAST
        run: |
          cat <<EOF > nginx.conf
          server {
              listen 80;
              server_name localhost;
          
              location / {
                  root /usr/share/nginx/html;
                  try_files \$uri /index.html;
              }
          
              location /teacher/ {
                  proxy_pass http://java-app-for-scan:8080/teacher/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          
              location /api/ {
                  proxy_pass http://java-app-for-scan:8080/api/;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF

      - name: Create Docker Compose file for DAST environment
        run: |
          cat <<EOF > docker-compose.dast.yml
          version: '3.8'
          services:
            db-for-scan:
              image: mysql:8.0
              container_name: db-for-scan
              environment:
                MYSQL_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
                MYSQL_DATABASE: ${{ env.DB_NAME }}
                MYSQL_USER: ${{ env.DB_USER }}
                MYSQL_PASSWORD: ${{ env.DB_PASSWORD }}
              volumes:
                - ./db-init:/docker-entrypoint-initdb.d
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                timeout: 20s
                retries: 10
          
            java-app-for-scan:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: java-app-for-scan
              depends_on:
                db-for-scan:
                  condition: service_healthy
              environment:
                - platform.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
                - platform.datasource.host=db-for-scan
                - platform.datasource.port=3306
                - platform.datasource.database=${{ env.DB_NAME }}
                - platform.datasource.username=${{ env.DB_USER }}
                - platform.datasource.password=${{ env.DB_PASSWORD }}
          
            nginx-for-scan:
              image: nginx:latest
              container_name: nginx-for-scan
              ports:
                - "80:80"
              volumes:
                - ./react-build:/usr/share/nginx/html:ro
                - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
              depends_on:
                - java-app-for-scan
          EOF

      - name: Start integrated environment with Docker Compose
        run: docker compose -f docker-compose.dast.yml up -d

      - name: Wait for services to be fully up
        run: echo "Waiting 10 seconds for all services to initialize..." && sleep 10

      - name: Run OWASP ZAP Full Scan (DAST)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: 'http://localhost'
          allow_issue_writing: false
          artifact_name: 'dast-report'

      - name: Tear down the test environment
        if: always()
        run: docker compose -f docker-compose.dast.yml down

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Tag and Push image to ACR
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }} ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.ACR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}
          docker tag ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.sha_short }} ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.ACR_REPOSITORY }}:latest
          docker push ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.ACR_REPOSITORY }}:${{ steps.vars.outputs.sha_short }}
          docker push ${{ vars.ACR_LOGIN_SERVER }}/${{ vars.ACR_REPOSITORY }}:latest
